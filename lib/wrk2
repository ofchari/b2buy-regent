import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:b2buy/login_page.dart';

import 'package:http/http.dart' as http;
import 'package:flutter_typeahead/flutter_typeahead.dart';

import 'dart:io';

void main() => runApp(MyApp());

// Replace the placeholders with your actual API key and secret
String apiKey = "7cbf607bc7e6184"; //yaanee
String apiSecret = "bbce3ba695e127f"; //yaanee
//String apiKey = "3c966af1562b29d"; //3pin
//String apiSecret = "04004ec744768d0"; //3pin not use
//String apiSecret = "d3948302cc8874c"; //3pin

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Login Demo',
      theme: ThemeData(
        primarySwatch: Colors.lightBlue,
      ),
      home: LoginPage(),
    );
  }
}

class LoginPage extends StatefulWidget {
  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  String _email = '';
  String _password = '';
  String _errorMessage = '';

  void _handleLogin() {
    if (_email == 'a' && _password == 'a') {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => MainPage()),
      );
    } else {
      setState(() {
        _errorMessage = 'Invalid email or password';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        width: double.infinity,
        decoration: BoxDecoration(
            gradient: LinearGradient(begin: Alignment.topCenter, colors: [
          Colors.deepOrange,
          Colors.deepOrangeAccent,
          Colors.orange
        ])),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            SizedBox(
              height: 80,
            ),
            Padding(
              padding: EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  FadeAnimation(
                      1,
                      Text(
                        "Login",
                        style: TextStyle(color: Colors.white, fontSize: 40),
                      )),
                  SizedBox(
                    height: 10,
                  ),
                  FadeAnimation(
                      1.3,
                      Text(
                        "Welcome Back",
                        style: TextStyle(color: Colors.white, fontSize: 18),
                      )),
                ],
              ),
            ),
            SizedBox(height: 20),
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.only(
                        topLeft: Radius.circular(60),
                        topRight: Radius.circular(60))),
                child: SingleChildScrollView(
                  child: Padding(
                    padding: EdgeInsets.all(30),
                    child: Column(
                      children: <Widget>[
                        SizedBox(
                          height: 60,
                        ),
                        FadeAnimation(
                            1.4,
                            Container(
                              decoration: BoxDecoration(
                                  color: Colors.white,
                                  borderRadius: BorderRadius.circular(10),
                                  boxShadow: [
                                    BoxShadow(
                                        color: Color.fromRGBO(225, 95, 27, .3),
                                        blurRadius: 20,
                                        offset: Offset(0, 10))
                                  ]),
                              child: Column(
                                children: <Widget>[
                                  Container(
                                    padding: EdgeInsets.all(10),
                                    decoration: BoxDecoration(
                                        border: Border(
                                            bottom: BorderSide(
                                                color: Colors.white70))),
                                    child: TextField(
                                      onChanged: (value) => _email = value,
                                      decoration: InputDecoration(
                                          hintText: "Email or Phone number",
                                          hintStyle:
                                              TextStyle(color: Colors.grey),
                                          border: InputBorder.none),
                                    ),
                                  ),
                                  Container(
                                    padding: EdgeInsets.all(10),
                                    decoration: BoxDecoration(
                                        border: Border(
                                            bottom: BorderSide(
                                                color: Colors.white70))),
                                    child: TextField(
                                      onChanged: (value) => _password = value,
                                      decoration: InputDecoration(
                                          hintText: "Password",
                                          hintStyle:
                                              TextStyle(color: Colors.grey),
                                          border: InputBorder.none),
                                    ),
                                  ),
                                ],
                              ),
                            )),
                        SizedBox(
                          height: 40,
                        ),
                        FadeAnimation(
                            1.5,
                            Text(
                              "Forgot Password?",
                              style: TextStyle(color: Colors.grey),
                            )),
                        SizedBox(
                          height: 40,
                        ),
                        GestureDetector(
                          onTap: _handleLogin,
                          child: FadeAnimation(
                              1.6,
                              Container(
                                height: 50,
                                margin: EdgeInsets.symmetric(horizontal: 50),
                                decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(50),
                                    color: Colors.orange[900]),
                                child: Center(
                                  child: Text(
                                    "Login",
                                    style: TextStyle(
                                        color: Colors.white,
                                        fontWeight: FontWeight.bold),
                                  ),
                                ),
                              )),
                        ),
                        SizedBox(
                          height: 50,
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            )
          ],
        ),
      ),
    );
  }
}

class MainPage extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MainPage> {
  String _imageUrl = '';
  String _partnerName = '';
  String _party = '';
  TextEditingController _rateController1 = TextEditingController();
  TextEditingController _rateController2 = TextEditingController();
  TextEditingController _rateController3 = TextEditingController();
  TextEditingController _qtyController1 = TextEditingController();
  TextEditingController _qtyController2 = TextEditingController();
  TextEditingController _qtyController3 = TextEditingController();
  double _amount1 = 0;
  double _amount2 = 0;
  double _amount3 = 0;
  List<Map<String, dynamic>> _dataList = [];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Frappe API Demo',
      home: Scaffold(
        appBar: AppBar(
            title: const Text('Order Details'),
            centerTitle: true,
            actions: [
              IconButton(
                onPressed: () {
                  print(_dataList);
                },
                icon: Icon(Icons.send),
              ),
            ]),
        body: SingleChildScrollView(
          child: Center(
            child: FutureBuilder<List<dynamic>>(
              future: fetchData(),
              builder: (context, snapshot) {
                if (snapshot.hasData) {
                  return Column(
                    children: [
                      const SizedBox(
                        height: 8,
                      ),
                      Container(
                        width: 500,
                        padding: EdgeInsets.symmetric(horizontal: 10),
                        child: TextField(
                          decoration: InputDecoration(
                            labelText: 'Image URL',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.all(
                                Radius.circular(15),
                              ),
                            ),
                            isDense: true,
                          ),
                          controller: TextEditingController(text: _imageUrl),
                          onChanged: (value) {
                            // Update the URL of the image
                            setState(() {
                              _imageUrl = value;
                            });
                          },
                        ),
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      if (_imageUrl.isNotEmpty)
                        Image.network(
                          _imageUrl,
                          height: 200,
                          width: 200,
                          fit: BoxFit.cover,
                        ),
                      const SizedBox(
                        height: 8,
                      ),
                      Container(
                        width: 500,
                        padding: EdgeInsets.symmetric(horizontal: 10),
                        child: TypeAheadFormField<String>(
                          textFieldConfiguration: TextFieldConfiguration(
                            decoration: InputDecoration(
                              labelText: 'Party',
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.all(
                                  Radius.circular(15),
                                ),
                              ),
                              isDense: true,
                            ),
                            controller: TextEditingController(text: _party),
                          ),
                          suggestionsCallback: (pattern) async {
                            // Filter the partner names based on the input pattern
                            List<String> partnerNames = (snapshot.data ?? [])
                                .map((item) => item["party"].toString())
                                .toList();
                            return partnerNames.where((name) => name
                                .toLowerCase()
                                .contains(pattern.toLowerCase()));
                          },
                          itemBuilder: (context, suggestion) {
                            return ListTile(
                              title: Text(suggestion),
                            );
                          },
                          onSuggestionSelected: (suggestion) {
                            // Set the selected partner name
                            setState(() {
                              _party = suggestion;
                              //_imageUrl = suggestion;
                              //print(suggestion);
                            });
                            // Fetch the rate for the selected partner
                            final partnerData =
                                (snapshot.data ?? []).firstWhere(
                              (item) => item["party"].toString() == suggestion,
                              orElse: () => null,
                            );
                          },
                        ),
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      Container(
                        width: 500,
                        padding: EdgeInsets.symmetric(horizontal: 10),
                        child: TypeAheadFormField<String>(
                          textFieldConfiguration: TextFieldConfiguration(
                            decoration: InputDecoration(
                              labelText: 'Item',
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.all(
                                  Radius.circular(15),
                                ),
                              ),
                              isDense: true,
                            ),
                            controller:
                                TextEditingController(text: _partnerName),
                          ),
                          suggestionsCallback: (pattern) async {
                            // Filter the partner names based on the input pattern
                            List<String> partnerNames = (snapshot.data ?? [])
                                .map((item) => item["partner_name"].toString())
                                .toList();
                            return partnerNames.where((name) => name
                                .toLowerCase()
                                .contains(pattern.toLowerCase()));
                          },
                          itemBuilder: (context, suggestion) {
                            return ListTile(
                              title: Text(suggestion),
                            );
                          },
                          onSuggestionSelected: (suggestion) {
                            // Set the selected partner name
                            setState(() {
                              _partnerName = suggestion;
                              //_imageUrl = suggestion;
                              //print(suggestion);
                            });
                            // Fetch the rate for the selected partner
                            final partnerData =
                                (snapshot.data ?? []).firstWhere(
                              (item) =>
                                  item["partner_name"].toString() == suggestion,
                              orElse: () => null,
                            );
                            if (partnerData != null) {
                              final rate = partnerData["rate"].toString();
                              _rateController1.text = rate;
                              final image = partnerData["images"].toString();
                              _imageUrl = image;
                              // Recalculate the amount based on the fetched rate and qty
                              setState(() {
                                _amount1 = double.parse(rate) *
                                    double.parse(_qtyController1.text);
                              });
                            }
                          },
                        ),
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Container(
                            width: 111,
                            height: 45,
                            child: TextField(
                              decoration: InputDecoration(
                                labelText: 'Size 1',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.all(
                                    Radius.circular(15),
                                  ),
                                ),
                              ),
                            ),
                          ),
                          SizedBox(width: 10),
                          Container(
                            width: 111,
                            height: 45,
                            child: TextField(
                              decoration: InputDecoration(
                                labelText: 'Size 2',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.all(
                                    Radius.circular(15),
                                  ),
                                ),
                              ),
                            ),
                          ),
                          SizedBox(width: 10),
                          Container(
                            width: 111,
                            height: 45,
                            child: TextField(
                              decoration: InputDecoration(
                                labelText: 'Size 3',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.all(
                                    Radius.circular(15),
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Container(
                            width: 111,
                            height: 45,
                            child: TextField(
                              decoration: InputDecoration(
                                labelText: 'Rate 1',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.all(
                                    Radius.circular(15),
                                  ),
                                ),
                                isDense: true,
                              ),
                              keyboardType: TextInputType.number,
                              controller: _rateController1,
                              onChanged: (value) {
                                // Recalculate the amount when the rate or qty changes
                                setState(() {
                                  _amount1 = double.parse(value) *
                                      double.parse(_qtyController1.text);
                                });
                              },
                            ),
                          ),
                          SizedBox(width: 10),
                          Container(
                            width: 111,
                            height: 45,
                            child: TextField(
                              decoration: InputDecoration(
                                labelText: 'Rate 2',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.all(
                                    Radius.circular(15),
                                  ),
                                ),
                                isDense: true,
                              ),
                              keyboardType: TextInputType.number,
                              controller: _rateController2,
                              onChanged: (value) {
                                // Recalculate the amount when the rate or qty changes
                                setState(() {
                                  _amount2 = double.parse(value) *
                                      double.parse(_qtyController2.text);
                                });
                              },
                            ),
                          ),
                          SizedBox(width: 10),
                          Container(
                            width: 111,
                            height: 45,
                            child: TextField(
                              decoration: InputDecoration(
                                labelText: 'Rate 3',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.all(
                                    Radius.circular(15),
                                  ),
                                ),
                                isDense: true,
                              ),
                              keyboardType: TextInputType.number,
                              controller: _rateController3,
                              onChanged: (value) {
                                // Recalculate the amount when the rate or qty changes
                                setState(() {
                                  _amount3 = double.parse(value) *
                                      double.parse(_qtyController3.text);
                                });
                              },
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Container(
                            width: 111,
                            height: 45,
                            child: TextField(
                              decoration: InputDecoration(
                                labelText: 'Qty 1',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.all(
                                    Radius.circular(15),
                                  ),
                                ),
                                isDense: true,
                              ),
                              keyboardType: TextInputType.number,
                              controller: _qtyController1,
                              onChanged: (value) {
                                // Recalculate the amount when the rate or qty changes
                                setState(() {
                                  _amount1 = double.parse(value) *
                                      double.parse(_rateController1.text);
                                });
                              },
                            ),
                          ),
                          SizedBox(width: 10),
                          Container(
                            width: 111,
                            height: 45,
                            child: TextField(
                              decoration: InputDecoration(
                                labelText: 'Qty 2',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.all(
                                    Radius.circular(15),
                                  ),
                                ),
                                isDense: true,
                              ),
                              keyboardType: TextInputType.number,
                              controller: _qtyController2,
                              onChanged: (value) {
                                // Recalculate the amount when the rate or qty changes
                                setState(() {
                                  _amount2 = double.parse(value) *
                                      double.parse(_rateController2.text);
                                });
                              },
                            ),
                          ),
                          SizedBox(width: 10),
                          Container(
                            width: 111,
                            height: 45,
                            child: TextField(
                              decoration: InputDecoration(
                                labelText: 'Qty 3',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.all(
                                    Radius.circular(15),
                                  ),
                                ),
                                isDense: true,
                              ),
                              keyboardType: TextInputType.number,
                              controller: _qtyController3,
                              onChanged: (value) {
                                // Recalculate the amount when the rate or qty changes
                                setState(() {
                                  _amount3 = double.parse(value) *
                                      double.parse(_rateController3.text);
                                });
                              },
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Container(
                            width: 111,
                            child: Text(
                              'Amount: $_amount1',
                              style: TextStyle(fontSize: 20),
                            ),
                          ),
                          SizedBox(width: 10),
                          Container(
                            width: 111,
                            child: Text(
                              'Amount: $_amount2',
                              style: TextStyle(fontSize: 20),
                            ),
                          ),
                          SizedBox(width: 10),
                          Container(
                            width: 111,
                            child: Text(
                              'Amount: $_amount3',
                              style: TextStyle(fontSize: 20),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      ElevatedButton(
                        onPressed: () {
                          // Add the entered data to a list

                          if (_rateController1.text.isNotEmpty &&
                              _qtyController1.text.isNotEmpty) {
                            _dataList.add({
                              "partner_name": _partnerName,
                              "rate": double.parse(_rateController1.text),
                              "qty": double.parse(_qtyController1.text),
                              "amount": _amount1,
                            });
                          }
                          if (_rateController2.text.isNotEmpty &&
                              _qtyController2.text.isNotEmpty) {
                            _dataList.add({
                              "partner_name": _partnerName,
                              "rate": double.parse(_rateController2.text),
                              "qty": double.parse(_qtyController2.text),
                              "amount": _amount2,
                            });
                          }
                          if (_rateController3.text.isNotEmpty &&
                              _qtyController3.text.isNotEmpty) {
                            _dataList.add({
                              "partner_name": _partnerName,
                              "rate": double.parse(_rateController3.text),
                              "qty": double.parse(_qtyController3.text),
                              "amount": _amount3,
                            });
                          }

                          // Clear the text fields
                          _rateController1.clear();
                          _rateController2.clear();
                          _rateController3.clear();
                          _qtyController1.clear();
                          _qtyController2.clear();
                          _qtyController3.clear();
                          setState(() {
                            _partnerName = '';
                            _amount1 = 0;
                            _amount2 = 0;
                            _amount3 = 0;
                          });
                        },
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(Icons.add, size: 20),
                            SizedBox(width: 8),
                            Text(
                              'Add',
                              style: TextStyle(
                                  fontSize: 16, fontWeight: FontWeight.bold),
                            ),
                          ],
                        ),
                        style: ElevatedButton.styleFrom(
                          primary: Colors.blueAccent,
                          onPrimary: Colors.white,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(20),
                          ),
                          padding: EdgeInsets.symmetric(
                              horizontal: 40, vertical: 16),
                        ),
                      ),
                      const SizedBox(
                        height: 8,
                      ),
                      ListView.builder(
                        shrinkWrap: true,
                        itemCount: _dataList.length,
                        itemBuilder: (context, index) {
                          final data = _dataList[index];
                          return ListTile(
                            title: Text(data["partner_name"]),
                            //subtitle: Text('Amount: ${data["amount"]}'),
                            subtitle: Text(
                                'Rate: ${data["rate"]} Qty: ${data["qty"]} Amount: ${data["amount"]}'),
                            trailing: GestureDetector(
                              child: const Icon(
                                Icons.delete,
                                color: Colors.red,
                              ),
                              onTap: () {
                                setState(() {
                                  _dataList.removeAt(index);
                                });
                              },
                            ),
                          );
                        },
                      ),
                    ],
                  );
                } else if (snapshot.hasError) {
                  return Text("${snapshot.error}");
                }
                // By default, show a loading spinner
                return CircularProgressIndicator();
              },
            ),
          ),
        ),
      ),
    );
  }

  Future<List<dynamic>> fetchData() async {
    final urls = [
      'https://erp.yaaneefashions.com/api/method/regent.regent.client.get_flutter_data',
      'https://erp.yaaneefashions.com/api/method/regent.regent.client.get_flutter_party',
      if (_partnerName != null && _partnerName.isNotEmpty)
        'https://erp.yaaneefashions.com/api/method/regent.regent.client.get_flutter_size?name=VCCWHSU2316RSB',
    ];
    final requests = urls.map((url) async {
      final response = await http.post(
        Uri.parse(url),
        headers: {
          'Authorization': 'token $apiKey:$apiSecret',
          'Content-Type': 'application/json'
        },
        body: json.encode({}),
      );
      print(response.body[2]);

      if (response.statusCode == 200) {
        return json.decode(response.body)["message"];
      } else {
        throw Exception('Failed to load data from $url');
      }
    });
    final results = await Future.wait(requests);

    // Combine the results from all the API requests into a single list
    return results.expand((result) => result).toList();
  }

  Map<String, dynamic> _getArgs(String url) {
    if (url.contains('get_flutter_size')) {
      return {"name": _partnerName};
    } else {
      return {};
    }
  }

  //final response = await http.post(
  // Uri.parse(
  //'https://3pin.glenmargon.com/api/method/regent.regent.client.get_flutter_mobile'),
  // 'https://erp.yaaneefashions.com/api/method/regent.regent.client.get_flutter_data'),
  // headers: {
  // 'Authorization': 'token $apiKey:$apiSecret',
  //  'Content-Type': 'application/json'
  // },
  // body: json.encode({"args": {}}),
  // );
  //if (response.statusCode == 200) {
  //return json.decode(response.body)["message"];
  //} else {
  // throw Exception('Failed to load data');
  //}
}
